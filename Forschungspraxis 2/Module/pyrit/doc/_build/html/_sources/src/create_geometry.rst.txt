===================
Creating a geometry
===================
Before a problem can be simulation, a geometry must be defined. For this, Pyrit is using the open source software *Gmsh*. There are several ways to define a geometry: The user can import a *STEP* file, create a geometry using Pyrit :py:mod:`~pyrit.geometry` package, or import an already existing *Gmsh* file.
A step by step tutorial is provided in the folder *tutorials/generate_a_model*.

Importing a *STEP* file
-------------------------
Often, the geometry and topology information, respectively, of a simulation problem already exists, e.g. in a different simulation software like CST or COMSOL or in a CAD file format. Most software environments offer the export of the geometry data in the *STEP* file format.
Depending on the information in the *STEP* file, the surfaces of the geometry need to be connected, redundant edges need to be deleted, and physical groups needs to be defined.

Model definition based on Pyrit
-------------------------------
The second approach uses solely Pyrit through the Gmsh API. The model is implemented as a Python dataclass. A dedicated method of the class creates the model. Inside of this method, the geometry is built, all data structures needed for further computation are generated, and materials, boundary conditions and excitations are assigned to the geometry.

Model definition based on geo-file
----------------------------------
The third approach uses an existing *Gmsh* file (.geo file) with already defined physical groups. Again, the model is defined as a Python dataclass, with the difference, that the geometry is loaded from a *Gmsh* file. Here it is important, that the names of the physical groups are identical in the *Gmsh* file and the Python dataclass.
