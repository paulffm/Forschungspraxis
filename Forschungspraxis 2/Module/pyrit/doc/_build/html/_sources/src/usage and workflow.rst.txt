==================
Usage and Workflow
==================

------------
Introduction
------------

The object-oriented structure of Pyrit allows, in contrast to other FE software packages, different levels of abstraction: On one hand, the user can access and customize the basic and physics-independent FE routines. On the other hand, Pyrit offers classes that serve as templates and predefined solvers for a set of selected EM and thermal problems.

This allows to model and simulate field problems without detailed knowledge of the weak formulation or of the FE method.
Additionally, Pyrit provides standard post-processing routines as well as the possibility to export results to Paraview and LaTeX (for plotting with pgfplots).

The geometry and mesh generation of the open source software `Gmsh <https://gmsh.info/>`_ is used. In order to make the geometry generation more convenient, the package :py:mod:`~pyrit.geometry` provides a unified interface to \gmsh.

Note that all physical quantities, such as e.g. the electric charge (in A/s) or the permittivity (in As/Vm) are defined in **SI units**.

-----------
Workflow
-----------

Problem definition:
-------------------
Before a simulation is executed, Pyrit defines a field problem. This first step is the choice of the problem type. This includes the differential equation to be solved, the dimension of the problem and the time dependency. When the regime is determined, the corresponding problem class needs to be selected. Subsequently, the geometry is built and the materials, boundary conditions and excitations are assigned. The assignment relies on the concept of physical groups of *Gmsh*. These are then allocated to geometrical entities.

Problem solution:
------------------
Now that the problem is completely defined, it can be solved. For that, a mesh and a shape function object is required. The former can be generated and extracted from *Gmsh* with the :py:mod:`~pyrit.geometry` package. The latter is fixed by the chosen problem. With the shape function object, the required matrices and vectors can be computed and assembled into the final system of equations. This can be solved using a predefined ``solve`` routine defined in the problem class or any other solve method.

Post processing:
----------------

The result from the problem solution step is a vector or multiple vectors, depending on the problem, respectively. Each problem class is equipped with a corresponding solution class.  These implement standard post-processing routines and allow for a straight-forward visualization of the results. This step also includes the export of the data to files of different formats.

----------------------------
Problem and solution classes
----------------------------

The following problem and solution classes are available for a template-based usage of Pyrit:

.. toctree::

    problem classes
    solution classes